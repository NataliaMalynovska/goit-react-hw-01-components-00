{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\goit-react-hw-01-components\\\\src\\\\components\\\\FriendList\\\\FriendList.js\";\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FriendList = _ref => {\n  let {\n    friends\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    class: \"friend-list\",\n    children: friends.map(stat => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"label\",\n        children: stat.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"percentage\",\n        children: stat.percentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 5\n      }, this)]\n    }, stat.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 3\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 1\n  }, this);\n};\n_c = FriendList;\nFriendList.propTypes = {\n  friends: PropTypes.arrayOf(PropTypes.shape({\n    avatar: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    isOnline: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired\n  }))\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"FriendList\");","map":{"version":3,"sources":["C:/project/goit-react-hw-01-components/src/components/FriendList/FriendList.js"],"names":["PropTypes","FriendList","friends","map","stat","label","percentage","id","propTypes","arrayOf","shape","avatar","string","isRequired","name","isOnline","bool","number"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;;AAEA,OAAO,MAAMC,UAAU,GAAC,QAAc;AAAA,MAAb;AAACC,IAAAA;AAAD,GAAa;AAClC,sBACJ;AAAI,IAAA,KAAK,EAAC,aAAV;AAAA,cACCA,OAAO,CAACC,GAAR,CAAYC,IAAI,iBACf;AAAA,8BACE;AAAM,QAAA,KAAK,EAAC,OAAZ;AAAA,kBAAqBA,IAAI,CAACC;AAA1B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,KAAK,EAAC,YAAZ;AAAA,kBAA0BD,IAAI,CAACE;AAA/B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAASF,IAAI,CAACG,EAAd;AAAA;AAAA;AAAA;AAAA,YADD;AADD;AAAA;AAAA;AAAA;AAAA,UADI;AAWH,CAZM;KAAMN,U;AAabA,UAAU,CAACO,SAAX,GAAsB;AAClBN,EAAAA,OAAO,EAACF,SAAS,CAACS,OAAV,CACJT,SAAS,CAACU,KAAV,CAAgB;AACZC,IAAAA,MAAM,EAAEX,SAAS,CAACY,MAAV,CAAiBC,UADb;AAEZC,IAAAA,IAAI,EAAEd,SAAS,CAACY,MAAV,CAAiBC,UAFX;AAGZE,IAAAA,QAAQ,EAAEf,SAAS,CAACgB,IAAV,CAAeH,UAHb;AAIZN,IAAAA,EAAE,EAAEP,SAAS,CAACiB,MAAV,CAAiBJ;AAJT,GAAhB,CADI;AADU,CAAtB","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport const FriendList=({friends})=> {\r\n    return (\r\n<ul class=\"friend-list\">\r\n{friends.map(stat => (\r\n  <li key={stat.id}>\r\n    <span class=\"label\">{stat.label}</span>\r\n    <span class=\"percentage\">{stat.percentage}</span>\r\n  </li>\r\n))} \r\n  {/* <!-- Произвольное кол-во FriendListItem --> */}\r\n</ul>\r\n)\r\n}\r\nFriendList.propTypes= {\r\n    friends:PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            avatar: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            isOnline: PropTypes.bool.isRequired,\r\n            id: PropTypes.number.isRequired\r\n    })\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}